// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countRole = `-- name: CountRole :one
SELECT COUNT(r.role_id)
FROM role r
WHERE (? = TRUE AND r.role_id = ? OR ? = FALSE)
  AND (? = TRUE AND r.role_name = ? OR ? = FALSE)
  AND r.status != 'deleted'
`

type CountRoleParams struct {
	Column1  interface{} `json:"column_1"`
	RoleID   int64       `json:"role_id"`
	Column3  interface{} `json:"column_3"`
	Column4  interface{} `json:"column_4"`
	RoleName string      `json:"role_name"`
	Column6  interface{} `json:"column_6"`
}

func (q *Queries) CountRole(ctx context.Context, arg CountRoleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRole,
		arg.Column1,
		arg.RoleID,
		arg.Column3,
		arg.Column4,
		arg.RoleName,
		arg.Column6,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLatsInsertedID = `-- name: GetLatsInsertedID :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) GetLatsInsertedID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLatsInsertedID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const getRole = `-- name: GetRole :one
SELECT r.role_id,
       r.role_name,
       r.status,
       r.created_at,
       r.created_by,
       r.updated_at,
       r.updated_by
FROM role r
WHERE r.role_id = ?
  AND r.status != 'deleted'
`

func (q *Queries) GetRole(ctx context.Context, roleID int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, roleID)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const insertRole = `-- name: InsertRole :exec
INSERT INTO role (role_name, status, created_at, created_by)
VALUES (?, ?, CURRENT_TIMESTAMP, ?)
`

type InsertRoleParams struct {
	RoleName  string `json:"role_name"`
	Status    string `json:"status"`
	CreatedBy string `json:"created_by"`
}

func (q *Queries) InsertRole(ctx context.Context, arg InsertRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertRole, arg.RoleName, arg.Status, arg.CreatedBy)
	return err
}

const listRoles = `-- name: ListRoles :many
SELECT r.role_id,
       r.role_name,
       r.status,
       r.created_at,
       r.created_by,
       r.updated_at,
       r.updated_by
FROM role r
WHERE (? = TRUE AND r.role_id = ? OR ? = FALSE)
  AND (? = TRUE AND r.role_name = ? OR ? = FALSE)
  AND r.status != 'deleted'
ORDER BY 
    CASE WHEN ? = 'role_id ASC' THEN r.role_id END ASC,
    CASE WHEN ? = 'role_id DESC' THEN r.role_id END DESC,
    CASE WHEN ? = 'created_at ASC' THEN r.created_at END ASC,
    CASE WHEN ? = 'created_at DESC' THEN r.created_at END DESC,
    r.created_at DESC
LIMIT ? OFFSET ?
`

type ListRolesParams struct {
	Column1  interface{} `json:"column_1"`
	RoleID   int64       `json:"role_id"`
	Column3  interface{} `json:"column_3"`
	Column4  interface{} `json:"column_4"`
	RoleName string      `json:"role_name"`
	Column6  interface{} `json:"column_6"`
	Column7  interface{} `json:"column_7"`
	Column8  interface{} `json:"column_8"`
	Column9  interface{} `json:"column_9"`
	Column10 interface{} `json:"column_10"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles,
		arg.Column1,
		arg.RoleID,
		arg.Column3,
		arg.Column4,
		arg.RoleName,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
		arg.Column10,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE role
SET role_name      = ?,
    status         = ?,
    updated_at     = CURRENT_TIMESTAMP,
    updated_by     = ?
WHERE role_id = ?
`

type UpdateRoleParams struct {
	RoleName  string         `json:"role_name"`
	Status    string         `json:"status"`
	UpdatedBy sql.NullString `json:"updated_by"`
	RoleID    int64          `json:"role_id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole,
		arg.RoleName,
		arg.Status,
		arg.UpdatedBy,
		arg.RoleID,
	)
	return err
}

const updateRoleStatus = `-- name: UpdateRoleStatus :exec
UPDATE role
SET status     = ?,
    updated_at = CURRENT_TIMESTAMP,
    updated_by = ?
WHERE role_id = ?
  AND status != 'deleted'
`

type UpdateRoleStatusParams struct {
	Status    string         `json:"status"`
	UpdatedBy sql.NullString `json:"updated_by"`
	RoleID    int64          `json:"role_id"`
}

func (q *Queries) UpdateRoleStatus(ctx context.Context, arg UpdateRoleStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleStatus, arg.Status, arg.UpdatedBy, arg.RoleID)
	return err
}
